<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="product">	


<resultMap type="pdto" id="pdtoMap">
	<id column="pro_Num" property="proNum"/>
	<result column="pro_Name" property="proName"/>
	<result column="pro_Address" property="proAddress"/>
	<result column="pro_Phone" property="proPhone"/>
	
	<result column="pro_Post" property="proPost"/>
	<result column="pro_Info" property="proInfo"/>
	<result column="pro_Notice" property="proNotice"/>
	<result column="pro_Refund" property="proRefund"/>
	<result column="pro_Zipcode" property="proZipcode"/>
	
	<result column="pro_Date" property="proDate"/>
	<result column="pro_Price" property="proPrice"/>
	<result column="pro_Time" property="proTime"/>
	
	
	
<!-- 	<collection column="pro_Num" property="proPicList" ofType="study.cloud.stc.product.model.vo.ProductDetailDto">
	<result column="pro_Pic_Original" property="proPicOriginal"/>
	<result column="pro_Pic_Rename" property="proPicRename"/>
	</collection> -->


</resultMap>	

	<insert id="insertProduct" parameterType="pdto">
		<selectKey keyProperty="proNum" resultType="int" order="BEFORE">
			select seq_pro_num.nextval from dual
		</selectKey>
		insert into map values( #{proNum}, #{proName},#{proAddress},#{proPhone})
	</insert>


	<insert id="insertProduct2" parameterType="pdto">
		INSERT ALL 
		INTO PRODUCT VALUES 	(#{proNum}, #{memId},#{proPost},#{proInfo},#{proNotice},#{proRefund},#{proZipcode})
		INTO PRODUCTFILE VALUES	(#{proNum}, #{proPicOriginal},#{proPicRename})
		select * from dual
	</insert>
	
	<!-- productList 화면 -->
	<select id="selectList" resultType="pdvo">
		SELECT PRO_NUM
      		 , PRO_NAME
<!--              , SUBSTR(PRO_ADDRESS,3) AS PRO_ADDRESS -->
             , PRO_ADDRESS
             , PRO_PHONE
             , MIN(PRO_PRICE) AS PRO_PRICE
		  FROM MAP 
    LEFT OUTER JOIN PRODUCT
         USING (PRO_NUM)
    LEFT OUTER JOIN PROTIME 
         USING (PRO_NUM)
   <trim prefix="WHERE" prefixOverrides="AND|OR">
       <if test="proAddress != null and proAddress neq ''">
         PRO_ADDRESS LIKE '%'||#{proAddress}||'%'
       </if>
       <if test="proDate != null and proDate neq ''">
         OR PRO_DATE = #{proDate}
       </if>
   </trim>         
         GROUP BY (PRO_NUM, PRO_NAME, PRO_ADDRESS, PRO_PHONE)
         ORDER BY PRO_NUM
	</select>
	
	<!-- productList 페이징 count -->
	<select id="selectOneCount" resultType="_int">
	SELECT COUNT(*) CNT
	  FROM MAP 
      LEFT OUTER JOIN PRODUCT
     USING (PRO_NUM)
	<if test="proDate != null and proDate neq ''">
      LEFT OUTER JOIN PROTIME 
     USING (PRO_NUM) 
	</if>
	<trim prefix="WHERE" prefixOverrides="AND|OR">
       <if test="proAddress != null and proAddress neq ''">
         PRO_ADDRESS LIKE '%'||#{proAddress}||'%'
       </if>
       <if test="proDate != null and proDate neq ''">
         OR PRO_DATE = #{proDate}
       </if>
    </trim> 
    </select>
	
	
	
	
<!-- 	상세 페이지 화면 -->
	<!-- <select id="proDetail"  resultType="pdto">
	SELECT
			pro_num 
		  ,pro_name
		  ,pro_post
		  ,pro_info
		  ,pro_notice
		  ,pro_refund
		  ,pro_phone
		  from map
    LEFT OUTER JOIN PRODUCT
         USING (PRO_NUM)
    LEFT OUTER JOIN PROTIME 
         USING (PRO_NUM)
         where pro_num = #{proNum}
	WHERE PRO_NUM LIKE '%'||#{proNum}||'%'

	</select> -->
	<select id="proDetail"  resultType="pdto">
		SELECT *
		  FROM MAP
	LEFT OUTER JOIN PRODUCT
	     USING (PRO_NUM)
	LEFT OUTER JOIN PROTIME 
	     USING (PRO_NUM)
	     WHERE PRO_NUM = #{proNum}
	</select>
	<!-- product detail qna -->
	<insert id="insertQna" parameterType="qvo">
		INSERT INTO QNA VALUES(
		       #{proNum}
	    	 , (SELECT PRO_NAME FROM MAP WHERE PRO_NUM = #{proNum})
			 , #{memId}
		     , #{memQuestion}
			 , (SELECT MEM_AUTHORITY FROM MEMBER WHERE MEM_ID = #{memId})
			 , NULL
		     , SYSDATE
		     , (SELECT NVL(MAX(QNA_NUM), 0)+1 FROM QNA)
		)
	</insert>
		
	<update id="updateQna" parameterType="qvo">
		UPDATE QNA
   		   SET MEM_QUESTION = #{memQuestion}
         WHERE QNA_NUM = #{qnaNum}
	</update>
	
	<update id="updateReply" parameterType="qvo">
		UPDATE QNA
   		   SET HOST_ANSWER = #{hostAnswer}
         WHERE QNA_NUM = #{qnaNum}
	</update>
	
	<delete id="deleteQna" parameterType="qvo">
		DELETE FROM QNA WHERE QNA_NUM = #{qnaNum}
	</delete>
	
	<!-- detail/qna, host/qna 페이징 count -->
	<select id="selectQnaCount" resultType="_int">
		SELECT COUNT(*) FROM QNA WHERE PRO_NUM = #{proNum}
	</select>
	
	<select id="selectQnaList" resultType="qvo">
		SELECT * 
		  FROM QNA
	    <if test="proNum != null and proNum neq ''">
         WHERE PRO_NUM = #{proNum}
   	    </if>		 
		 ORDER BY QNA_DATE DESC
	</select>
	
	
	
	
	<!-- 호스트 & 어드민 상품목록 -->
	
	<select id="hostProductList" resultType="hostProDto">
	select
		 pro_num
        ,pro_name
        ,pro_address
        ,pro_phone
        ,mem_id
        ,mem_authority
        from map
        left outer join product
        using (pro_num)
        left outer join member
        using (mem_id)
	 	</select>
	<select id="productOneCnt" resultType="_int">

	SELECT COUNT(*) CNT
	  FROM MAP 
     	LEFT OUTER JOIN PRODUCT
        USING (PRO_NUM)     
    	LEFT OUTER JOIN MEMBER
        USING (MEM_ID)
        WHERE PRO_NUM = #{proNum}
	
	</select>
	<select id="hostList"  resultType="hostProDto">
	select  pro_num
        ,pro_name
        ,pro_address
        ,pro_phone
        ,mem_id
        ,mem_authority
        from map
        left outer join product
        using (pro_num)
        left outer join member
        using (mem_id)
         <if test="proNum != null and proNum neq ''">
         WHERE PRO_NUM = #{proNum}
   	    </if>		
        order by pro_num desc
	 
	</select>
	
	
	<!-- update -->
	
	<update id="updateMap">
	update map
	set
	 PRO_NAME = #{proName}
	,PRO_ADDRESS = #{proAddress}
	,PRO_PHONE = #{proPhone}
	
	 WHERE PRO_NUM = #{proNum}
	
	</update>
	
	<update id="updateProduct">
	update product
    set
     pro_post=#{proPost}
    ,pro_info=#{proInfo}
    ,pro_notice=#{proNotice}
    ,pro_refund=#{proRefund}
     WHERE PRO_NUM = #{proNum}
    
	</update>
	
	<update id="updateProTime">
	update protime
	set
	pro_price=#{proPrice}
	where pro_num = #{proNum}
	</update>
	
	<update id="updateProductFile">
	update productfile
	set
	pro_pic_original = #{proPicOriginal}
	,pro_pic_rename = #{proPicRename}
	where pro_num = #{proNum}

	</update>
	
	
	<delete id="deleteProductfile">
	delete from productfile
	where pro_num = #{proNum}
	</delete>
	
	<delete id="deleteProduct">
	delete from product
         where pro_num = #{proNum}
	</delete>
	
	<delete id="deleteMap">
	delete from map 
         where pro_num = #{proNum}
	</delete>
	
	
	
	
	
	
	
	
	<!-- host/qna List select 옵션 -->	
	<select id="selectHostProductList" resultType="pdvo">
		SELECT PRO_NUM , (select PRO_NAME from map where PRO_NUM = p.PRO_NUM) PRO_NAME, MEM_ID
		FROM PRODUCT p WHERE MEM_ID = #{memId}
	</select>
	
	<!-- host/qna 테이블 List -->
	<select id="selectHostProductQnaList" resultType="qvo">
		SELECT 	MEM_ID	, MEM_QUESTION	, QNA_DATE	, QNA_NUM , HOST_ANSWER
		FROM QNA 
		WHERE PRO_NUM = #{proNum}
		  AND MEM_QUESTION IS NOT NULL
		ORDER BY QNA_DATE DESC
	</select>
	
	<!-- host/qna replyDeleteQna 관리자 답변 삭제 -->
	<update id="replyDeleteQna" parameterType="qvo">
		UPDATE QNA
   		   SET HOST_ANSWER = null
         WHERE QNA_NUM = #{qnaNum}
	</update>
	
	
	
	
	
	
	
	<!-- 상품운영시간  -->
	<!-- <insert id="insertProTime" parameterType="Ptvo">
		INSERT ALL 
		INTO PRODUCT VALUES (#{proDate}, #{proNum},#{proPrice},#{RsvNum},#{proTime})
		select * from dual
	</insert> -->
	
	
	
	
	
	
	
	
	
</mapper>
